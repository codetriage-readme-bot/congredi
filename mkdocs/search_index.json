{
    "docs": [
        {
            "location": "/", 
            "text": "Congredi \ntoxik.io/congredi/\n\n\n\n\nPeered Democratic Documents\n\n\nFor the static webclient written in JS, see \ndelegito.io\n\n\n\n\nCongredi\n is a python program that allows a community to help\nindividuals write changes to repositories of text, that are then\nvoted on by organizations to find a consensus.\n\n\nDesign ideas\n\n\nFunctionally speaking, it uses Twisted.amp to send packets, and runs some\ncrypto on them before performing actions on a redis/neo4j database.\n\n\nKeys are the hashes, Basically Accessible Soft state Eventual consistency,\ngit-diff style diffs, torrenting segments, AES/EC protos, STV from different\npapers on the subject.\n\n\nLooking for contributors!\n\n\nWhile I'm building this up, I'm looking for contributors!\nHead over to Waffle.io, issuehub.io, or CodeTriage :heart:.\n\n\nHere's some example \nissue tags\n.\n\n\nInstalling\n\n\n\n\nlibrary: \npip install congredi\n\n\ngit: \ngit clone https://github.com/thetoxicarcade/congredi.git \n cd congredi\n\n\ndocker:\n\n\n\n\nericoflondon/\n    congredi                - individual peer/clients\n    delegito                - static content, swarmable\n\n\n\n\nRunning\n\n\n\n\npython -m congredi.main.run peer --redis 6379 --neo4j 7474 --port 8800\n\n\npython -m congredi.main.run client --host localhost --port 8800\n\n\n\n\nProjects I'm still looking at:\nhttps://github.com/twisted/vertex\nhttps://github.com/indigo-dc/udocker\n    pull docker containers, decompress, run in PRoot/chroot?\nhttps://github.com/jamercee/signet\n    sign python and use loader to run\nhttps://github.com/bnlucas/python-basehash\n    encrypted hashing\nhttps://github.com/rw/plainsight\nhttps://github.com/JarrodCTaylor/steganopy\n    steganography\nhttps://github.com/barseghyanartur/ska\n    - signed (symetric then HMACed)\nhttps://github.com/WhisperSystems/libsignal-protocol-javascript\nhttps://whispersystems.org/docs/specifications/xeddsa/\nhttps://whispersystems.org/docs/specifications/x3dh/\nhttps://whispersystems.org/docs/specifications/doubleratchet/\n    ratchet", 
            "title": "index"
        }, 
        {
            "location": "/#congredi-toxikiocongredi", 
            "text": "Peered Democratic Documents  For the static webclient written in JS, see  delegito.io   Congredi  is a python program that allows a community to help\nindividuals write changes to repositories of text, that are then\nvoted on by organizations to find a consensus.", 
            "title": "Congredi toxik.io/congredi/"
        }, 
        {
            "location": "/#design-ideas", 
            "text": "Functionally speaking, it uses Twisted.amp to send packets, and runs some\ncrypto on them before performing actions on a redis/neo4j database.  Keys are the hashes, Basically Accessible Soft state Eventual consistency,\ngit-diff style diffs, torrenting segments, AES/EC protos, STV from different\npapers on the subject.", 
            "title": "Design ideas"
        }, 
        {
            "location": "/#looking-for-contributors", 
            "text": "While I'm building this up, I'm looking for contributors!\nHead over to Waffle.io, issuehub.io, or CodeTriage :heart:.  Here's some example  issue tags .", 
            "title": "Looking for contributors!"
        }, 
        {
            "location": "/#installing", 
            "text": "library:  pip install congredi  git:  git clone https://github.com/thetoxicarcade/congredi.git   cd congredi  docker:   ericoflondon/\n    congredi                - individual peer/clients\n    delegito                - static content, swarmable", 
            "title": "Installing"
        }, 
        {
            "location": "/#running", 
            "text": "python -m congredi.main.run peer --redis 6379 --neo4j 7474 --port 8800  python -m congredi.main.run client --host localhost --port 8800   Projects I'm still looking at:\nhttps://github.com/twisted/vertex\nhttps://github.com/indigo-dc/udocker\n    pull docker containers, decompress, run in PRoot/chroot?\nhttps://github.com/jamercee/signet\n    sign python and use loader to run\nhttps://github.com/bnlucas/python-basehash\n    encrypted hashing\nhttps://github.com/rw/plainsight\nhttps://github.com/JarrodCTaylor/steganopy\n    steganography\nhttps://github.com/barseghyanartur/ska\n    - signed (symetric then HMACed)\nhttps://github.com/WhisperSystems/libsignal-protocol-javascript\nhttps://whispersystems.org/docs/specifications/xeddsa/\nhttps://whispersystems.org/docs/specifications/x3dh/\nhttps://whispersystems.org/docs/specifications/doubleratchet/\n    ratchet", 
            "title": "Running"
        }, 
        {
            "location": "/contributing/intro/", 
            "text": "Get Involved\n\n\n\n\nHop on Waffle to view the current GitHub issues:\n    \n.\n\n\nClone repo:\n    \ngit clone github.com/thetoxicarcade/congredi \n cd congredi\n\n\npre-fetch npm/bower, gulp\n\n\ndocker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install \n bower --allow-root --config.interactive install\"\n\n\ndocker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install -g gulp \n gulp\"\n\n*\n\n\n\n\n\n\nHack some things\n\n\nsetup.py build test install\n\n\nsetup.py metadata sdist upload\n\n\ndocker-compose build \n docker-compose up -d \n docker-compose scale workers=2\n\n\n\n\n\n\nSubmit some pull requests\n\n\n\n\nThis repo handles letting anonymous people reach compromises. Unfortunately the \ncodebase doesn't extend to github comments. Don't be any form of oppressive or\nslandarous towards another person or group.\n\n\nExplaining an endpoint allows other people to use it correctly. If the\ndocs won't match the code anymore, change them too. Use markdown code\nblocks for snippets, when in doubt run \nmkdocs serve\n to try them out.\n\n\nBefore submitting your changes, run \nsetup.py test\n \n/|| \ndocker-compose build\n,\njust to see that everything superficially checks out. If you'd made changes\noutside the scope of the tests, it might not register as failing, but it's\na good, basic step. The testing system currently uses \nnose2\n \n \njasmine\n.\n\n\nInsofar as the editor you use can format, and the test suite used can lint it.\nCurrently, that's \neslint\n \n \npylint\n (\npython setup.py lint\n).\nIn other words, if the machines can both catch and help you, style it that way.", 
            "title": "intro"
        }, 
        {
            "location": "/contributing/intro/#get-involved", 
            "text": "Hop on Waffle to view the current GitHub issues:\n     .  Clone repo:\n     git clone github.com/thetoxicarcade/congredi   cd congredi  pre-fetch npm/bower, gulp  docker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install   bower --allow-root --config.interactive install\"  docker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install -g gulp   gulp\" \n*    Hack some things  setup.py build test install  setup.py metadata sdist upload  docker-compose build   docker-compose up -d   docker-compose scale workers=2    Submit some pull requests   This repo handles letting anonymous people reach compromises. Unfortunately the \ncodebase doesn't extend to github comments. Don't be any form of oppressive or\nslandarous towards another person or group.  Explaining an endpoint allows other people to use it correctly. If the\ndocs won't match the code anymore, change them too. Use markdown code\nblocks for snippets, when in doubt run  mkdocs serve  to try them out.  Before submitting your changes, run  setup.py test   /||  docker-compose build ,\njust to see that everything superficially checks out. If you'd made changes\noutside the scope of the tests, it might not register as failing, but it's\na good, basic step. The testing system currently uses  nose2     jasmine .  Insofar as the editor you use can format, and the test suite used can lint it.\nCurrently, that's  eslint     pylint  ( python setup.py lint ).\nIn other words, if the machines can both catch and help you, style it that way.", 
            "title": "Get Involved"
        }, 
        {
            "location": "/contributing/style/", 
            "text": "Style guides\n\n\nI'm not currently conforming to the results\nfrom \neslint\n or \npylint\n, but I could be.\n\n\nPython\n\n\nPep8 via autopep8. Note that I come from a lovely tabs world, so\nI just suggest installing \ncheck.sh\n into your git hooks.\n\n\nJS\n\n\nsingle-quote, tab, 1tbs camelCase", 
            "title": "style"
        }, 
        {
            "location": "/contributing/style/#style-guides", 
            "text": "I'm not currently conforming to the results\nfrom  eslint  or  pylint , but I could be.", 
            "title": "Style guides"
        }, 
        {
            "location": "/contributing/style/#python", 
            "text": "Pep8 via autopep8. Note that I come from a lovely tabs world, so\nI just suggest installing  check.sh  into your git hooks.", 
            "title": "Python"
        }, 
        {
            "location": "/contributing/style/#js", 
            "text": "single-quote, tab, 1tbs camelCase", 
            "title": "JS"
        }, 
        {
            "location": "/contributing/tests/", 
            "text": "CI / Unit Tests\n\n\nTravis runs compilation, unit tests, a docker assembly, \n mkdocs builds.\n\n\nNose2 - \ntest directory\n\n\nby-file/library tests, \ntest_flask.py\n -\n \napi.py\n for instance.\n\n\nJasmine - \ntest directory\n\n\nby-file/library tests, \ndemo.js\n -\n \napp.js\n for instance.", 
            "title": "tests"
        }, 
        {
            "location": "/contributing/tests/#ci-unit-tests", 
            "text": "Travis runs compilation, unit tests, a docker assembly,   mkdocs builds.", 
            "title": "CI / Unit Tests"
        }, 
        {
            "location": "/contributing/tests/#nose2-test-directory", 
            "text": "by-file/library tests,  test_flask.py  -   api.py  for instance.", 
            "title": "Nose2 - test directory"
        }, 
        {
            "location": "/contributing/tests/#jasmine-test-directory", 
            "text": "by-file/library tests,  demo.js  -   app.js  for instance.", 
            "title": "Jasmine - test directory"
        }, 
        {
            "location": "/contributing/commits/", 
            "text": "Commits (from Atom/Contributing)\n\n\n\n\nPresent Tense, Imperative mood \nrun\n \nnot\n \nran/runs\n\n\nprefixes (use emojis! :sunglasses:)\n\n\n\n\n(finally) Submitting Changes\n\n\n\n\nCreate (or finish creating) an issue referencing what needs to change.\n\n\nStart your pull request (on your honor it's your own code).\n\n\nIf the build, documentation, or testing need changes, alert us to them.", 
            "title": "commits"
        }, 
        {
            "location": "/contributing/commits/#commits-from-atomcontributing", 
            "text": "Present Tense, Imperative mood  run   not   ran/runs  prefixes (use emojis! :sunglasses:)", 
            "title": "Commits (from Atom/Contributing)"
        }, 
        {
            "location": "/contributing/commits/#finally-submitting-changes", 
            "text": "Create (or finish creating) an issue referencing what needs to change.  Start your pull request (on your honor it's your own code).  If the build, documentation, or testing need changes, alert us to them.", 
            "title": "(finally) Submitting Changes"
        }, 
        {
            "location": "/contributing/tags/", 
            "text": "Waffle / Github allows us to have labels to report progress about things.\nThese are the labels I can think of, and where they lie on the spectrum.\n\n\nYou also might want to check out the emoji examples for context, over\nat \n//github.com/thetoxicarcade/congredi\n.\n\n\nhelp wanted\n\n\nSections where nobody's claimed something. If you assigned yourself to an\nissue, you can remove the \nhelp wanted\n label.\n\n\nfirst-pr / easy pick / beginner \n:heart:\n\n\nSmall problems I shouldn't be focusing on but need fixing eventually.\n\n\nExample: \nsetup.py doesn't correctly generate an RST for PyPi\n\n\ntougher \n:octocat:\n\n\nBig problems I don't know how to approach exactly.\n\n\nExample: \nlistenTCP(0) won't work on korora. Possibly a firewall issue?\n\n\nthe little things\n\n\nbug \ntrivial - :bug: critical - :ambulance:\n\n\nAn error in the expected behavior of the application. Can be patched within \n_._.x\n.\n\n\nExample: \nrunning congredi in python3 - buffer objects not supported\n\n\ntrivial \n:microsope:\n\n\nSmall feature fixes. Patched at \n_._.x\n.\n\n\nExample: \nDocker image size improvements.\n\n\nfeature \n:stars:\n\n\nNew functionality. Can be patched within \n_.x.x\n.\n\n\nExample: \nOAEP within congredi's packets\n\n\nenhancement \n:telescope:\n\n\nImproved functionality. Pached at \n_.x.x\n.\n\n\nExample: \nUse Pycrypto over Cryptography.\n\n\nthe big picture\n\n\ntests \n:warning:\n\n\nAdding tests to cover scenarios.\n\n\nExample: \nRequire implementer to fail if command is invalid.\n\n\ndesign \n:tophat:\n\n\nmockups, interfaces, structuring.\n\n\nExample: \nGit Unified-diff recursion demo.py\n\n\ndocumentation \n:books:\n\n\ntrying things out (a bit of QA), explaining code\n\n\nExample: \nThe 'MONITOR' command.\n\n\nrefactoring \nbeauty - :art: clutter - :fire:\n\n\nIncrease quality without changing functionality\n\n\nExample: \nunify two classes with a superclass\n\n\nMachine labels\n\n\nLabels useful to us, but automatic to the platform.\n\n\nin progress / ready\n\n\nLabels used by waffle board\n\n\nduplicate / invalid / question / wontfix\n\n\nLabels useful to github", 
            "title": "Tags/Emoji"
        }, 
        {
            "location": "/contributing/tags/#help-wanted", 
            "text": "Sections where nobody's claimed something. If you assigned yourself to an\nissue, you can remove the  help wanted  label.", 
            "title": "help wanted"
        }, 
        {
            "location": "/contributing/tags/#first-pr-easy-pick-beginner-heart", 
            "text": "Small problems I shouldn't be focusing on but need fixing eventually.  Example:  setup.py doesn't correctly generate an RST for PyPi", 
            "title": "first-pr / easy pick / beginner :heart:"
        }, 
        {
            "location": "/contributing/tags/#tougher-octocat", 
            "text": "Big problems I don't know how to approach exactly.  Example:  listenTCP(0) won't work on korora. Possibly a firewall issue?", 
            "title": "tougher :octocat:"
        }, 
        {
            "location": "/contributing/tags/#the-little-things", 
            "text": "", 
            "title": "the little things"
        }, 
        {
            "location": "/contributing/tags/#bug-trivial-bug-critical-ambulance", 
            "text": "An error in the expected behavior of the application. Can be patched within  _._.x .  Example:  running congredi in python3 - buffer objects not supported", 
            "title": "bug trivial - :bug: critical - :ambulance:"
        }, 
        {
            "location": "/contributing/tags/#trivial-microsope", 
            "text": "Small feature fixes. Patched at  _._.x .  Example:  Docker image size improvements.", 
            "title": "trivial :microsope:"
        }, 
        {
            "location": "/contributing/tags/#feature-stars", 
            "text": "New functionality. Can be patched within  _.x.x .  Example:  OAEP within congredi's packets", 
            "title": "feature :stars:"
        }, 
        {
            "location": "/contributing/tags/#enhancement-telescope", 
            "text": "Improved functionality. Pached at  _.x.x .  Example:  Use Pycrypto over Cryptography.", 
            "title": "enhancement :telescope:"
        }, 
        {
            "location": "/contributing/tags/#the-big-picture", 
            "text": "", 
            "title": "the big picture"
        }, 
        {
            "location": "/contributing/tags/#tests-warning", 
            "text": "Adding tests to cover scenarios.  Example:  Require implementer to fail if command is invalid.", 
            "title": "tests :warning:"
        }, 
        {
            "location": "/contributing/tags/#design-tophat", 
            "text": "mockups, interfaces, structuring.  Example:  Git Unified-diff recursion demo.py", 
            "title": "design :tophat:"
        }, 
        {
            "location": "/contributing/tags/#documentation-books", 
            "text": "trying things out (a bit of QA), explaining code  Example:  The 'MONITOR' command.", 
            "title": "documentation :books:"
        }, 
        {
            "location": "/contributing/tags/#refactoring-beauty-art-clutter-fire", 
            "text": "Increase quality without changing functionality  Example:  unify two classes with a superclass", 
            "title": "refactoring beauty - :art: clutter - :fire:"
        }, 
        {
            "location": "/contributing/tags/#machine-labels", 
            "text": "Labels useful to us, but automatic to the platform.", 
            "title": "Machine labels"
        }, 
        {
            "location": "/contributing/tags/#in-progress-ready", 
            "text": "Labels used by waffle board", 
            "title": "in progress / ready"
        }, 
        {
            "location": "/contributing/tags/#duplicate-invalid-question-wontfix", 
            "text": "Labels useful to github", 
            "title": "duplicate / invalid / question / wontfix"
        }, 
        {
            "location": "/extending/angular/", 
            "text": "Extending / Scaling / UI-ing\n\n\nCongredi has no workable client. To make one, you might try:\n\n\n\n\nTraefik with docker-swarm serving docker containers\n\n\nnginx-served angular app (jwt, openpgp)\n\n\n\n\nAngular UI designs\n\n\n\n\nThink Hoodiecrow/mailvelope/whiteout-io/mailpile\n\n\n\n\n# .when('/settings' etc\n/#/self/settings\n/#/node/admin\n/#/search\n/#/edit\n/#/vote\n\n/api/search?offset=0?limit=0\n/api/auth/jwt\n/api/docs/new\n/api/docs/:id/edit\n/api/vote/new\n/api/vote/:id/cast\n/api/orgs/new\n/api/orgs/:id/\n\n\n\n\nEdits to Angular UI js\n\n\n\n\nrun \ngulp clean\n\n\nmake edits to \n/js/\n\n\nif you change a library call, change its \n.test.js\n\n\nif you change a controller or otherwise, change its \nview\n\n\n\n\n\n\nrun \ngulp\n (should run tests as well)", 
            "title": "angular"
        }, 
        {
            "location": "/extending/angular/#extending-scaling-ui-ing", 
            "text": "Congredi has no workable client. To make one, you might try:   Traefik with docker-swarm serving docker containers  nginx-served angular app (jwt, openpgp)", 
            "title": "Extending / Scaling / UI-ing"
        }, 
        {
            "location": "/extending/angular/#angular-ui-designs", 
            "text": "Think Hoodiecrow/mailvelope/whiteout-io/mailpile   # .when('/settings' etc\n/#/self/settings\n/#/node/admin\n/#/search\n/#/edit\n/#/vote\n\n/api/search?offset=0?limit=0\n/api/auth/jwt\n/api/docs/new\n/api/docs/:id/edit\n/api/vote/new\n/api/vote/:id/cast\n/api/orgs/new\n/api/orgs/:id/", 
            "title": "Angular UI designs"
        }, 
        {
            "location": "/extending/angular/#edits-to-angular-ui-js", 
            "text": "run  gulp clean  make edits to  /js/  if you change a library call, change its  .test.js  if you change a controller or otherwise, change its  view    run  gulp  (should run tests as well)", 
            "title": "Edits to Angular UI js"
        }, 
        {
            "location": "/extending/database/", 
            "text": "twisted nodes\n\n\nredis nodes / api key to hosted redis\n\n\nneo4j nodes / api key to hosted neo4j\n\n\n\n\ndocker run -it -d -p 4400:4400 --name=\"actions\" --restart=\"always\" -v $(pwd):/root ericoflondon/congredi\ndocker --verbose build --tag ide .\npython main/amp.py\npython -m congredi\npython -m congredi peer", 
            "title": "database"
        }, 
        {
            "location": "/spec/commands/", 
            "text": "Commands Overview\n\n\nCongredi, whether via the HTTP api, terminal client, or AMP peers,\nissues atomic statements to other peers using a specific syntax\nfor each one. It uses the following:\n\n\n\n\nGET\n\n\nSET\n\n\nSEEK\n\n\nSEARCH\n\n\n\n\nGET \n SET\n\n\nBoth \nget\n and \nset\n have a \npermissions\n boolean. When permisions is set to\n\nTrue\n, we check that the author is in our trust model, and perform the same\ncommand on our peers with \npermissions\n set to \nFalse\n.\n\n\nThey return the lifetime of the object.\n\n\n\n\nCheck signature of message\n\n\n\n\nWhen permissions are set, check web-of-trust to that key\n\n\n\n\n\n\nCheck that we have the hash\n\n\n\n\nWhen publishing a CHAIN, if we don't have previous\n    queue a job to get it or delete it\n\n\nReturn results + peers where we got it + lifetime of data\n\n\n\n\nRecursions\n\n\n\n\nCheck their auth\n\n\nCheck what we have - return as iter\n\n\nAsk peers - store \n return to user\n\n\ndivide work between peers\n\n\nwork to the null-hash at the front of the tree\n\n\nprove the content lines up end-to-end\n\n\n\n\n\n\n\n\nSEEK\n\n\nSeek operates on a direction (\nForward\n or \nBackward\n), an index (\ncurrent\n or\nthe 32 bit hash), and a \ncount\n integer. \n\n\nThis returns a dictionary of objects and the users/routers who have them.\n\n\nIf permissions are set, it'll begin trying to obtain those hashes.\n\n\nSEARCH\n\n\nSearch relies on having the entire object.\n\norder\n \noffset\n \ncount\n \nterm\n\n\nThis returns the larger resolved byte context, the object, and the\nrevision we searched from (say, 'defghj', which could be 6 commits ahead\nof another server you search on).\n\n\n\n\nIf we have it, search it.\n\n\nElse, use recursions to divvy work\n\n\nreturn results", 
            "title": "Commands"
        }, 
        {
            "location": "/spec/commands/#commands-overview", 
            "text": "Congredi, whether via the HTTP api, terminal client, or AMP peers,\nissues atomic statements to other peers using a specific syntax\nfor each one. It uses the following:   GET  SET  SEEK  SEARCH", 
            "title": "Commands Overview"
        }, 
        {
            "location": "/spec/commands/#get-set", 
            "text": "Both  get  and  set  have a  permissions  boolean. When permisions is set to True , we check that the author is in our trust model, and perform the same\ncommand on our peers with  permissions  set to  False .  They return the lifetime of the object.   Check signature of message   When permissions are set, check web-of-trust to that key    Check that we have the hash   When publishing a CHAIN, if we don't have previous\n    queue a job to get it or delete it  Return results + peers where we got it + lifetime of data", 
            "title": "GET &amp; SET"
        }, 
        {
            "location": "/spec/commands/#recursions", 
            "text": "Check their auth  Check what we have - return as iter  Ask peers - store   return to user  divide work between peers  work to the null-hash at the front of the tree  prove the content lines up end-to-end", 
            "title": "Recursions"
        }, 
        {
            "location": "/spec/commands/#seek", 
            "text": "Seek operates on a direction ( Forward  or  Backward ), an index ( current  or\nthe 32 bit hash), and a  count  integer.   This returns a dictionary of objects and the users/routers who have them.  If permissions are set, it'll begin trying to obtain those hashes.", 
            "title": "SEEK"
        }, 
        {
            "location": "/spec/commands/#search", 
            "text": "Search relies on having the entire object. order   offset   count   term  This returns the larger resolved byte context, the object, and the\nrevision we searched from (say, 'defghj', which could be 6 commits ahead\nof another server you search on).   If we have it, search it.  Else, use recursions to divvy work  return results", 
            "title": "SEARCH"
        }, 
        {
            "location": "/spec/storage/", 
            "text": "AUTHOR \n\n\n\n\n\n\n[LATEST|CHAIN|BLOCK]\n\nPERMISSIONS \n[TRUE|FALSE\n\n[\n OFFSET \n COUNT \n]\nSEARCH COMMIT \nAUTHOR e31df061a89e63ce7f6941c82b0261e91d400926a70e09f229e0dbdbe067ee19 SET COMMIT PERMISSIONS FALSE\nsign(req, key): value = yaml.dump(req); return key.sign(value)\n\n\nentity\n:\n    /proof              CHAIN [objecthash, start, stop, result, sig, previous]\n    /has                CHAIN [objecthash, previous, sig]\n    /wants              CHAIN [objecthash, previous, sig]\n\n\nchunk\n:          data\ncommit\n:         list(chunks), list(previous), author, sig\nrouter\n:\n    /ip                 CHAIN [ips, previous, sig]\n    /censor             CHAIN [hash, previous, sig]\n    /uptime             CHAIN [uptime, previous, sig]\n    /seen               CHAIN [seen, previous, sig]\n    /rank               CHAIN [rank, previous, sig]\n    /courier-of         CHAIN [hash-key, previous, sig]\n    /rendesvous-of      CHAIN [hash-key, previous, sig]\n    PRIVATE:\n        /blacklist          CHAIN [hash-key, ip, previous, sig]\n        /whitelist          CHAIN [hash-key, ip, previous, sig]\n        /peers              CHAIN [hash-key, ip, previous, sig]\n        /users              CHAIN [hash-key, previous, sig]\n        /admin              CHAIN [hash-key, previous, sig]\n\n\nuser\n: - pubkey\n    # properties\n    /bio                CHAIN [COMMIT, previous, sig]\n    /location           CHAIN [zkplocation, previous, sig]\n\n\n# couriers (public ips of endpoints)\n/couriered-by       CHAIN [courier, ip, previous, sig]\n/rendesvoused-by    CHAIN [rendesvous, ip, previous, sig]\n\n/join-req           CHAIN [org, previous, sig]\n/proposal           CHAIN [org, commit, vote, previous, sig]\n/member-of          CHAIN [org, previous, sig]\n\n\n/casted-votes       CHAIN [vote, ballot, previous, sig]\n/casted-polls       CHAIN [poll, ballot, previous, sig]\n\n/tree\nhash\n         CHAIN [commit, previous, sig]\n/saves              CHAIN [hash, previous, sig]\n\n\n\norg\n: - tuple(admin pubkeys)\n    /manifesto          BLOCK [COMMIT]\n    /borders            BLOCK [tuple]\n\n\n# couriers (endpoint IPs and user IPs\n/host-staff         BLOCK [key, ip, acceptance]\n/host-volunteer     BLOCK [key, acceptance]\n\n# documents neaded to align everyone to a vote\n/members            BLOCK [join-req, acceptance]\n/proposals          BLOCK [proposal, acceptance]\n\n# vote results\n/vote-tally\nhash\n   BLOCK [ballot, acceptance]\n/poll-tally\nhash\n   BLOCK [ballot, acceptance]\n\n\n/saves-tally        BLOCK [saves, acceptance]\n\n\n\nOLD\n\n\n\n\nCongredi deals with a hash-value structure and a directed graph structure,\nwith both redis and neo4j.\n\n\nBlobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.\n\n\nstructures \n query language (i.e. PUBLISH CACHE HAS \nobject\n)\nCACHE\nCOMPUTATION\nHISTORY\nIDENTITY\nCONTENT\nSETTING\n\n\n\n\nusers -\n agg -\n polls/votes/trees -\n commits -\n chunks\n\n\ndirected graph\n:{\n    \nuser\n:{\n        \ntrusts\n:\nusers\n,\n        \nfollows\n:\nrepos\n\n    \nrepo\n:\ncommits\n\n\n\n\n\n\"CACHE HAS\"\n\n\nA router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they have)\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)\n\n\n\n\n\"CACHE PROOF\"\n\n\nA router (identified by their public key) can prove they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they have)\n        32b nonce (as a challenge)\n        32b result (hash of adding the nonce to the selected bytes)\n        int position (place to grab bytes from)\n        datestring (time they proved that nonce)\n        32b sig (signature of the above)\n\n\n\n\n\"CACHE RANK\"\n\n\nA router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup rank hash\n        rank info\n        datestring (beginning rank date)\n        datestring (expiry date)\n        32b sig (signature of the above)\n\n\n\n\n\"CACHE SEEN\"\n\n\nA router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup hash\n        datestring last seen\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)\n\n\n\n\n\"CACHE UPTIME\"\n\n\nA router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup hash\n        uptime information\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)\n\n\n\n\n\"CACHE WANTS\"\n\n\nA router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\n64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they want)\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)\n\n\n\n\n\"COMPUTATION POLL\"\n\n\nAn org can compute a poll (public vote) together, and publish their findings\nin a poll object. Computation fields are byzantian problems, so consensus\nneeds reaching. We keep track of them in a list of objects totalled like this:\n\n\n(concatenate fields...)\n\n\nBlobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.\n\n\n32b hash of original poll spec :\n    32b lookup hash of bellow :\n        32b hash (of polls we do have)\n        list:\n            user's latest poll on this\n        result object\n        datestring (date)\n        32b sig (signature of the above)\n        32b threshsig\n\n\n\n\n    SAVES           - list(list(hash,begins,expires),date,threshsig)\n    TREES           - list(trees,date,threshsig)\n    VOTE            - list(votes,date,threshsig)\n    VOTERS          - list(proofs,date,threshsig)\n    BIO             - COMMIT,PREVIOUS,SIG\n    CHUNK           - truncated-gzip-ndiff-markdown\n    COMMIT          - hash,list(CHUNKS),list(PREVIOUS),SIG, KEY\n    MANIFESTO       - COMMIT,PREVIOUS,THRESHSIG\n    POLL            - list(TREES)\n    VOTE            - list(TREES)\n    MEMBERSHIPS     - list(list(CURRENT,PREVIOUS,SIG))\n    POLLS           - list(list(CURRENT,PREVIOUS,SIG))\n    PROPOSALS       - list(list(CURRENT,PREVIOUS,SIG))\n    SAVES           - list(list(list(hash,begins,expires),PREVIOUS,SIG))\n    TREES           - list(list(CURRENT,PREVIOUS,SIG))\n    VOTES           - list(list(CURRENT,PREVIOUS,SIG))\n    AGGREGATE       - list(KEYS), PREVIOUS, SIG\n    BORDERS         - CURRENT, PREVIOUS, THRESHSIG\n    IP              - IP, PREVIOUS, SIG\n    LOCATION        - ZKP, PREVIOUS, SIG\n    RENDESVOUS      - list(IPS), PREVIOUS, SIG\n    ROUTE           - KEY, PREVIOUS, SIG\n    USER            - KEY, PREVIOUS, SIG\n    ADMIN           - list(fp)\n    BLACKLIST       - list(fp)\n    IP              - previous:sig:ip\n    PEER            - list(fp)\n    RENDESVOUS      - previous:sig:list(fp)\n    USER            - list(fp)\n    WHITELIST       - list(fp)", 
            "title": "Storage"
        }, 
        {
            "location": "/spec/storage/#old", 
            "text": "Congredi deals with a hash-value structure and a directed graph structure,\nwith both redis and neo4j.  Blobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.  structures   query language (i.e. PUBLISH CACHE HAS  object )\nCACHE\nCOMPUTATION\nHISTORY\nIDENTITY\nCONTENT\nSETTING  users -  agg -  polls/votes/trees -  commits -  chunks directed graph :{\n     user :{\n         trusts : users ,\n         follows : repos \n     repo : commits", 
            "title": "OLD"
        }, 
        {
            "location": "/spec/storage/#cache-has", 
            "text": "A router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they have)\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)", 
            "title": "\"CACHE HAS\""
        }, 
        {
            "location": "/spec/storage/#cache-proof", 
            "text": "A router (identified by their public key) can prove they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they have)\n        32b nonce (as a challenge)\n        32b result (hash of adding the nonce to the selected bytes)\n        int position (place to grab bytes from)\n        datestring (time they proved that nonce)\n        32b sig (signature of the above)", 
            "title": "\"CACHE PROOF\""
        }, 
        {
            "location": "/spec/storage/#cache-rank", 
            "text": "A router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup rank hash\n        rank info\n        datestring (beginning rank date)\n        datestring (expiry date)\n        32b sig (signature of the above)", 
            "title": "\"CACHE RANK\""
        }, 
        {
            "location": "/spec/storage/#cache-seen", 
            "text": "A router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup hash\n        datestring last seen\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)", 
            "title": "\"CACHE SEEN\""
        }, 
        {
            "location": "/spec/storage/#cache-uptime", 
            "text": "A router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash of previous lookup hash\n        uptime information\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)", 
            "title": "\"CACHE UPTIME\""
        }, 
        {
            "location": "/spec/storage/#cache-wants", 
            "text": "A router (identified by their public key) can declare they have something with\npackets. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  64b key :\n    32b lookup hash of bellow :\n        32b hash (of content they want)\n        datestring (beginning storage date)\n        datestring (expiry date)\n        32b sig (signature of the above)", 
            "title": "\"CACHE WANTS\""
        }, 
        {
            "location": "/spec/storage/#computation-poll", 
            "text": "An org can compute a poll (public vote) together, and publish their findings\nin a poll object. Computation fields are byzantian problems, so consensus\nneeds reaching. We keep track of them in a list of objects totalled like this:  (concatenate fields...)  Blobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.  32b hash of original poll spec :\n    32b lookup hash of bellow :\n        32b hash (of polls we do have)\n        list:\n            user's latest poll on this\n        result object\n        datestring (date)\n        32b sig (signature of the above)\n        32b threshsig      SAVES           - list(list(hash,begins,expires),date,threshsig)\n    TREES           - list(trees,date,threshsig)\n    VOTE            - list(votes,date,threshsig)\n    VOTERS          - list(proofs,date,threshsig)\n    BIO             - COMMIT,PREVIOUS,SIG\n    CHUNK           - truncated-gzip-ndiff-markdown\n    COMMIT          - hash,list(CHUNKS),list(PREVIOUS),SIG, KEY\n    MANIFESTO       - COMMIT,PREVIOUS,THRESHSIG\n    POLL            - list(TREES)\n    VOTE            - list(TREES)\n    MEMBERSHIPS     - list(list(CURRENT,PREVIOUS,SIG))\n    POLLS           - list(list(CURRENT,PREVIOUS,SIG))\n    PROPOSALS       - list(list(CURRENT,PREVIOUS,SIG))\n    SAVES           - list(list(list(hash,begins,expires),PREVIOUS,SIG))\n    TREES           - list(list(CURRENT,PREVIOUS,SIG))\n    VOTES           - list(list(CURRENT,PREVIOUS,SIG))\n    AGGREGATE       - list(KEYS), PREVIOUS, SIG\n    BORDERS         - CURRENT, PREVIOUS, THRESHSIG\n    IP              - IP, PREVIOUS, SIG\n    LOCATION        - ZKP, PREVIOUS, SIG\n    RENDESVOUS      - list(IPS), PREVIOUS, SIG\n    ROUTE           - KEY, PREVIOUS, SIG\n    USER            - KEY, PREVIOUS, SIG\n    ADMIN           - list(fp)\n    BLACKLIST       - list(fp)\n    IP              - previous:sig:ip\n    PEER            - list(fp)\n    RENDESVOUS      - previous:sig:list(fp)\n    USER            - list(fp)\n    WHITELIST       - list(fp)", 
            "title": "\"COMPUTATION POLL\""
        }, 
        {
            "location": "/spec/packet/", 
            "text": "AMP Packets\n\n\nkleptography / outside obfuscation / steganalisis\nRATCHET sessionkey, prekey,\nONION FROM \nroute\n TO \nroute\n \ncontents\n\nratchet:onion:AONT:Axolotl EC AES new hope\nring learning homomorphic garlic, sign time+nounce,\nOAEP/AONT/hamming4:7\nnonce, prekey, session key, hash, time, pubkey, p2p, dht\nlibgit2-redis/txredisapi / redis / neo4j; if in peers,\ndelete, add peer 0(1) nettrust KV - list,\nread, add(k,v), delete(k)\n\n\n\n\nCongredi uses a simplified onion-routing system to discourage some censorship.\nServers, once active on the network, ask 3 nodes to be their rendesvous, and\nthen sign a statement that gets advertised around the network. Clients can\nmake a query to those nodes through a set of layered encryptions, until\nthe final node and the rendesvous node, either of which may object to the query.\nSince the serve stores data in plaintext, if it finds something objectionable,\nor of no use, it can censor that content as well.", 
            "title": "Packets"
        }, 
        {
            "location": "/spec/packet/#amp-packets", 
            "text": "kleptography / outside obfuscation / steganalisis\nRATCHET sessionkey, prekey,\nONION FROM  route  TO  route   contents \nratchet:onion:AONT:Axolotl EC AES new hope\nring learning homomorphic garlic, sign time+nounce,\nOAEP/AONT/hamming4:7\nnonce, prekey, session key, hash, time, pubkey, p2p, dht\nlibgit2-redis/txredisapi / redis / neo4j; if in peers,\ndelete, add peer 0(1) nettrust KV - list,\nread, add(k,v), delete(k)  Congredi uses a simplified onion-routing system to discourage some censorship.\nServers, once active on the network, ask 3 nodes to be their rendesvous, and\nthen sign a statement that gets advertised around the network. Clients can\nmake a query to those nodes through a set of layered encryptions, until\nthe final node and the rendesvous node, either of which may object to the query.\nSince the serve stores data in plaintext, if it finds something objectionable,\nor of no use, it can censor that content as well.", 
            "title": "AMP Packets"
        }
    ]
}