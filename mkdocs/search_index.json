{
    "docs": [
        {
            "location": "/", 
            "text": "Congredi \ndelegito.io\n\n\n\n\na BASE representation-of-law-via-cryptography protocol\n\n\n\n\nCongredi\n is a set of utilities and a Twisted server/shell for distributed\ndocument storage, revisioning, and voting on those revisions. Think of it\nas a community of git databases where groups of people rank their choices\non how fictional repos should be constructed. Like an STV version of reddit\nfor documents.\n\n\nFor a website/javascript style client, head over to\n\ngithub.com/thetoxicarcade/delegito\n.\n\n\nInstalling\n\n\n\n\nlibrary: \npip install congredi\n\n\ngit: \ngit clone https://github.com/thetoxicarcade/ac.git \n cd ac\n\n\ndocker:\n\n\n\n\nericoflondon/\n    congredi                - individual peer/clients\n    delegito                - static content, swarmable\n\n\n\n\nRunning\n\n\n\n\npython -m congredi.main.run peer --redis 6379 --neo4j 7474 --port 8800\n\n\npython -m congredi.main.run client --host localhost --port 8800\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncongredi\n \n\n\ndelegito\n \n\n\n\n\nProjects I'm still looking at:\nhttps://github.com/twisted/vertex\nhttps://github.com/indigo-dc/udocker\n    pull docker containers, decompress, run in PRoot/chroot?\nhttps://github.com/jamercee/signet\n    sign python and use loader to run\nhttps://github.com/bnlucas/python-basehash\n    encrypted hashing\nhttps://github.com/rw/plainsight\nhttps://github.com/JarrodCTaylor/steganopy\n    steganography\nhttps://github.com/barseghyanartur/ska\n    - signed (symetric then HMACed)\nhttps://github.com/WhisperSystems/libsignal-protocol-javascript\nhttps://whispersystems.org/docs/specifications/xeddsa/\nhttps://whispersystems.org/docs/specifications/x3dh/\nhttps://whispersystems.org/docs/specifications/doubleratchet/\n    ratchet", 
            "title": "index"
        }, 
        {
            "location": "/#congredi-delegitoio", 
            "text": "a BASE representation-of-law-via-cryptography protocol   Congredi  is a set of utilities and a Twisted server/shell for distributed\ndocument storage, revisioning, and voting on those revisions. Think of it\nas a community of git databases where groups of people rank their choices\non how fictional repos should be constructed. Like an STV version of reddit\nfor documents.  For a website/javascript style client, head over to github.com/thetoxicarcade/delegito .", 
            "title": "Congredi delegito.io"
        }, 
        {
            "location": "/#installing", 
            "text": "library:  pip install congredi  git:  git clone https://github.com/thetoxicarcade/ac.git   cd ac  docker:   ericoflondon/\n    congredi                - individual peer/clients\n    delegito                - static content, swarmable", 
            "title": "Installing"
        }, 
        {
            "location": "/#running", 
            "text": "python -m congredi.main.run peer --redis 6379 --neo4j 7474 --port 8800  python -m congredi.main.run client --host localhost --port 8800         congredi    delegito     Projects I'm still looking at:\nhttps://github.com/twisted/vertex\nhttps://github.com/indigo-dc/udocker\n    pull docker containers, decompress, run in PRoot/chroot?\nhttps://github.com/jamercee/signet\n    sign python and use loader to run\nhttps://github.com/bnlucas/python-basehash\n    encrypted hashing\nhttps://github.com/rw/plainsight\nhttps://github.com/JarrodCTaylor/steganopy\n    steganography\nhttps://github.com/barseghyanartur/ska\n    - signed (symetric then HMACed)\nhttps://github.com/WhisperSystems/libsignal-protocol-javascript\nhttps://whispersystems.org/docs/specifications/xeddsa/\nhttps://whispersystems.org/docs/specifications/x3dh/\nhttps://whispersystems.org/docs/specifications/doubleratchet/\n    ratchet", 
            "title": "Running"
        }, 
        {
            "location": "/contributing/intro/", 
            "text": "Get Involved\n\n\n\n\nHop on Waffle to view the current GitHub issues:\n    \n.\n\n\nClone repo:\n    \ngit clone github.com/thetoxicarcade/congredi \n cd congredi\n\n\npre-fetch npm/bower, gulp\n\n\ndocker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install \n bower --allow-root --config.interactive install\"\n\n\ndocker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install -g gulp \n gulp\"\n\n*\n\n\n\n\n\n\nHack some things\n\n\nsetup.py build test install\n\n\nsetup.py metadata sdist upload\n\n\ndocker-compose build \n docker-compose up -d \n docker-compose scale workers=2\n\n\n\n\n\n\nSubmit some pull requests\n\n\n\n\nThis repo handles letting anonymous people reach compromises. Unfortunately the \ncodebase doesn't extend to github comments. Don't be any form of oppressive or\nslandarous towards another person or group.\n\n\nExplaining an endpoint allows other people to use it correctly. If the\ndocs won't match the code anymore, change them too. Use markdown code\nblocks for snippets, when in doubt run \nmkdocs serve\n to try them out.\n\n\nBefore submitting your changes, run \nsetup.py test\n \n/|| \ndocker-compose build\n,\njust to see that everything superficially checks out. If you'd made changes\noutside the scope of the tests, it might not register as failing, but it's\na good, basic step. The testing system currently uses \nnose2\n \n \njasmine\n.\n\n\nInsofar as the editor you use can format, and the test suite used can lint it.\nCurrently, that's \neslint\n \n \npylint\n (\npython setup.py lint\n).\nIn other words, if the machines can both catch and help you, style it that way.", 
            "title": "intro"
        }, 
        {
            "location": "/contributing/intro/#get-involved", 
            "text": "Hop on Waffle to view the current GitHub issues:\n     .  Clone repo:\n     git clone github.com/thetoxicarcade/congredi   cd congredi  pre-fetch npm/bower, gulp  docker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install   bower --allow-root --config.interactive install\"  docker run -ti --rm -u $UID -v `pwd`/interface/:/srv/ marmelab/bower bash -c \"npm install -g gulp   gulp\" \n*    Hack some things  setup.py build test install  setup.py metadata sdist upload  docker-compose build   docker-compose up -d   docker-compose scale workers=2    Submit some pull requests   This repo handles letting anonymous people reach compromises. Unfortunately the \ncodebase doesn't extend to github comments. Don't be any form of oppressive or\nslandarous towards another person or group.  Explaining an endpoint allows other people to use it correctly. If the\ndocs won't match the code anymore, change them too. Use markdown code\nblocks for snippets, when in doubt run  mkdocs serve  to try them out.  Before submitting your changes, run  setup.py test   /||  docker-compose build ,\njust to see that everything superficially checks out. If you'd made changes\noutside the scope of the tests, it might not register as failing, but it's\na good, basic step. The testing system currently uses  nose2     jasmine .  Insofar as the editor you use can format, and the test suite used can lint it.\nCurrently, that's  eslint     pylint  ( python setup.py lint ).\nIn other words, if the machines can both catch and help you, style it that way.", 
            "title": "Get Involved"
        }, 
        {
            "location": "/contributing/style/", 
            "text": "Style guides\n\n\nI'm not currently conforming to the results\nfrom \neslint\n or \npylint\n, but I could be.\n\n\nPython\n\n\nPep8 excepting Tabs. Running \ncheck.sh\n can replace lots of it.\n\n\nJS\n\n\nsingle-quote, tab, 1tbs camelCase", 
            "title": "style"
        }, 
        {
            "location": "/contributing/style/#style-guides", 
            "text": "I'm not currently conforming to the results\nfrom  eslint  or  pylint , but I could be.", 
            "title": "Style guides"
        }, 
        {
            "location": "/contributing/style/#python", 
            "text": "Pep8 excepting Tabs. Running  check.sh  can replace lots of it.", 
            "title": "Python"
        }, 
        {
            "location": "/contributing/style/#js", 
            "text": "single-quote, tab, 1tbs camelCase", 
            "title": "JS"
        }, 
        {
            "location": "/contributing/tests/", 
            "text": "CI / Unit Tests\n\n\nTravis runs compilation, unit tests, a docker assembly, \n mkdocs builds.\n\n\nNose2 - \ntest directory\n\n\nby-file/library tests, \ntest_flask.py\n -\n \napi.py\n for instance.\n\n\nJasmine - \ntest directory\n\n\nby-file/library tests, \ndemo.js\n -\n \napp.js\n for instance.", 
            "title": "tests"
        }, 
        {
            "location": "/contributing/tests/#ci-unit-tests", 
            "text": "Travis runs compilation, unit tests, a docker assembly,   mkdocs builds.", 
            "title": "CI / Unit Tests"
        }, 
        {
            "location": "/contributing/tests/#nose2-test-directory", 
            "text": "by-file/library tests,  test_flask.py  -   api.py  for instance.", 
            "title": "Nose2 - test directory"
        }, 
        {
            "location": "/contributing/tests/#jasmine-test-directory", 
            "text": "by-file/library tests,  demo.js  -   app.js  for instance.", 
            "title": "Jasmine - test directory"
        }, 
        {
            "location": "/contributing/commits/", 
            "text": "Commits (from Atom/Contributing)\n\n\n\n\nPresent Tense, Imperative mood \nrun\n \nnot\n \nran/runs\n\n\nprefixes (use emojis! :sunglasses:)\n\n\n\n\n(finally) Submitting Changes\n\n\n\n\nCreate (or finish creating) an issue referencing what needs to change.\n\n\nStart your pull request (on your honor it's your own code).\n\n\nIf the build, documentation, or testing need changes, alert us to them.", 
            "title": "commits"
        }, 
        {
            "location": "/contributing/commits/#commits-from-atomcontributing", 
            "text": "Present Tense, Imperative mood  run   not   ran/runs  prefixes (use emojis! :sunglasses:)", 
            "title": "Commits (from Atom/Contributing)"
        }, 
        {
            "location": "/contributing/commits/#finally-submitting-changes", 
            "text": "Create (or finish creating) an issue referencing what needs to change.  Start your pull request (on your honor it's your own code).  If the build, documentation, or testing need changes, alert us to them.", 
            "title": "(finally) Submitting Changes"
        }, 
        {
            "location": "/contributing/emoji/", 
            "text": "want to change these \n.github\n docs?\n\n\n\n\n\n\n\n\n\n\nemoji\n\n\nsource\n\n\n\n\n\n\n\n\n\n\nLanguages :snake::triangular_ruler::zap::microscope::telescope::lock:\n\n\n:snake:``:triangular_ruler:``:zap:``:microscope:``:telescope:``:lock:\n -python, angular, Bolt/Neo4j/DB, crypto, loading, security\n\n\n\n\n\n\nQuality :100::pray::bug::green_heart::white_check_mark::nose::art::fire:\n\n\n:pray:``:100:``:bug:``:green_heart:``:nose:``:art:``:white_check_mark:``:fire:\n-builds, bugs, tests, CI, Nose2 tests,unit tests, structuredeleted code, clutter\n\n\n\n\n\n\nServices :heart::octocat::books::pencil2::memo::cloud::chart_with_upwards_trend:\n\n\n:chart_with_upwards_trend:``:heart:``:octocat:``:memo: ``:cloud:``:books:``:pencil2:\n-docs, git, mkdocs, docker,badgestutorials, methods\n\n\n\n\n\n\nReleases :arrow_up::tophat::ambulance::beers::warning::heavy_exclamation_mark:\n\n\n:tophat:``:ambulance:``:arrow_up:``:beers:``:warning:``:heavy_exclamation_mark:\n- BlackHat CVE , Triage / Catastrophic, release - cheers! beta - beta release, versions", 
            "title": "emoji"
        }, 
        {
            "location": "/extending/angular/", 
            "text": "Extending / Scaling / UI-ing\n\n\nCongredi has no workable client. To make one, you might try:\n\n\n\n\nTraefik with docker-swarm serving docker containers\n\n\nnginx-served angular app (jwt, openpgp)\n\n\n\n\nAngular UI designs\n\n\n\n\nThink Hoodiecrow/mailvelope/whiteout-io/mailpile\n\n\n\n\n# .when('/settings' etc\n/#/self/settings\n/#/node/admin\n/#/search\n/#/edit\n/#/vote\n\n/api/search?offset=0?limit=0\n/api/auth/jwt\n/api/docs/new\n/api/docs/:id/edit\n/api/vote/new\n/api/vote/:id/cast\n/api/orgs/new\n/api/orgs/:id/\n\n\n\n\nEdits to Angular UI js\n\n\n\n\nrun \ngulp clean\n\n\nmake edits to \n/js/\n\n\nif you change a library call, change its \n.test.js\n\n\nif you change a controller or otherwise, change its \nview\n\n\n\n\n\n\nrun \ngulp\n (should run tests as well)", 
            "title": "angular"
        }, 
        {
            "location": "/extending/angular/#extending-scaling-ui-ing", 
            "text": "Congredi has no workable client. To make one, you might try:   Traefik with docker-swarm serving docker containers  nginx-served angular app (jwt, openpgp)", 
            "title": "Extending / Scaling / UI-ing"
        }, 
        {
            "location": "/extending/angular/#angular-ui-designs", 
            "text": "Think Hoodiecrow/mailvelope/whiteout-io/mailpile   # .when('/settings' etc\n/#/self/settings\n/#/node/admin\n/#/search\n/#/edit\n/#/vote\n\n/api/search?offset=0?limit=0\n/api/auth/jwt\n/api/docs/new\n/api/docs/:id/edit\n/api/vote/new\n/api/vote/:id/cast\n/api/orgs/new\n/api/orgs/:id/", 
            "title": "Angular UI designs"
        }, 
        {
            "location": "/extending/angular/#edits-to-angular-ui-js", 
            "text": "run  gulp clean  make edits to  /js/  if you change a library call, change its  .test.js  if you change a controller or otherwise, change its  view    run  gulp  (should run tests as well)", 
            "title": "Edits to Angular UI js"
        }, 
        {
            "location": "/extending/database/", 
            "text": "twisted nodes\n\n\nredis nodes / api key to hosted redis\n\n\nneo4j nodes / api key to hosted neo4j\n\n\n\n\ndocker run -it -d -p 4400:4400 --name=\"actions\" --restart=\"always\" -v $(pwd):/root ericoflondon/congredi\ndocker --verbose build --tag ide .\npython main/amp.py\npython -m congredi\npython -m congredi peer", 
            "title": "database"
        }, 
        {
            "location": "/specification/about/", 
            "text": "Congredi operates on exchanging packets for hashes of content.\n\n\nThe commands include \nPUBLISH\n \nDEPLOY\n \nSUBSCRIBE\n \nMONITOR\n\n\nPAST\n \nCURRENT\n \nFUTURE\n \n \nSEARCH\n \n\n\nPackets are of the \nOnion\n and \nCommand\n variety.\n\n\nData stored includes many types, explained under \"data\".", 
            "title": "About"
        }, 
        {
            "location": "/specification/commands/", 
            "text": "Congredi uses a simplified onion-routing system to discourage some censorship.\nServers, once active on the network, ask 3 nodes to be their rendesvous, and\nthen sign a statement that gets advertised around the network. Clients can\nmake a query to those nodes through a set of layered encryptions, until\nthe final node and the rendesvous node, either of which may object to the query.\nSince the serve stores data in plaintext, if it finds something objectionable,\nor of no use, it can censor that content as well.\n\n\n'SET'\n    PUBLISH - permissions, long lasting item\n    DEPLOY - no permissions, publish key, may soon be deleted\n\n'GET'\n    SUBSCRIBE - permissions set rendesvous to pull updates\n    MONITOR - no permissions, query for key, request expires\n\n    PAST - grab all previous versions\n    CURRENT - grab signed latest\n    FUTURE - grab all newer versions\n\nSEARCH \n ORDER \n OFFSET \n COUNT \n TERM", 
            "title": "commands"
        }, 
        {
            "location": "/specification/data/", 
            "text": "Congredi deals with a hash-value structure and a directed graph structure,\nwith both redis and neo4j.\n\n\nBlobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.\n\n\nstructures \n query language (i.e. PUBLISH CACHE HAS \nobject\n)\nCACHE\n    HAS             - list(hash:key:sig:begins:expires)\n    WANTS           - list(hash:key:sig:begins:expires)\n    PROOF           - list(nonce:proof:date:sig)\n    SEEN            - list(prev:time:date:sig)\n    UPTIME          - list(prev:time:date:sig)\n    RANK            - list(prev:rank:date:sig)\nCOMPUTATION\n    POLL            - list(polls,date,threshsig)\n    VOTE            - list(votes,date,threshsig)\n    TREES           - list(trees,date,threshsig)\n    SAVES           - list(list(hash,begins,expires),date,threshsig)\n    VOTERS          - list(proofs,date,threshsig)\nHISTORY\n    TREES           - list(list(CURRENT,PREVIOUS,SIG))\n    POLLS           - list(list(CURRENT,PREVIOUS,SIG))\n    VOTES           - list(list(CURRENT,PREVIOUS,SIG))\n    MEMBERSHIPS     - list(list(CURRENT,PREVIOUS,SIG))\n    PROPOSALS       - list(list(CURRENT,PREVIOUS,SIG))\n    SAVES           - list(list(list(hash,begins,expires),PREVIOUS,SIG))\nIDENTITY\n    ROUTE           - KEY, PREVIOUS, SIG\n    USER            - KEY, PREVIOUS, SIG\n    AGGREGATE       - list(KEYS), PREVIOUS, SIG\n    IP              - IP, PREVIOUS, SIG\n    RENDESVOUS      - list(IPS), PREVIOUS, SIG\n    LOCATION        - ZKP, PREVIOUS, SIG\n    BORDERS         - CURRENT, PREVIOUS, THRESHSIG\nCONTENT\n    BIO             - COMMIT,PREVIOUS,SIG\n    MANIFESTO       - COMMIT,PREVIOUS,THRESHSIG\n    COMMIT          - hash,list(CHUNKS),list(PREVIOUS),SIG, KEY\n    CHUNK           - truncated-gzip-ndiff-markdown\n    POLL            - list(TREES)\n    VOTE            - list(TREES)\nSETTING\n    IP              - previous:sig:ip\n    RENDESVOUS      - previous:sig:list(fp)\n    ADMIN           - list(fp)\n    USER            - list(fp)\n    PEER            - list(fp)\n    WHITELIST       - list(fp)\n    BLACKLIST       - list(fp)\n\n\n\n\nusers -\n agg -\n polls/votes/trees -\n commits -\n chunks\n\n\ndirected graph\n:{\n    \nuser\n:{\n        \ntrusts\n:\nusers\n,\n        \nfollows\n:\nrepos\n\n    \nrepo\n:\ncommits\n\n\n\n\n\nkleptography / outside obfuscation / steganalisis\nRATCHET sessionkey, prekey,\nONION FROM \nroute\n TO \nroute\n \ncontents\n\nratchet:onion:AONT:Axolotl EC AES new hope\nring learning homomorphic garlic, sign time+nounce,\nOAEP/AONT/hamming4:7\nnonce, prekey, session key, hash, time, pubkey, p2p, dht\nlibgit2-redis/txredisapi / redis / neo4j; if in peers,\ndelete, add peer 0(1) nettrust KV - list,\nread, add(k,v), delete(k)", 
            "title": "data"
        }, 
        {
            "location": "/specification/packets/", 
            "text": "AMP Packets", 
            "title": "packets"
        }, 
        {
            "location": "/specification/packets/#amp-packets", 
            "text": "", 
            "title": "AMP Packets"
        }, 
        {
            "location": "/data/chains/", 
            "text": "", 
            "title": "data"
        }, 
        {
            "location": "/commands/design/", 
            "text": "Design Problems\n\n\nPUBLISH, DEPLOY, SUBSCRIBE, MONITOR, PAST, CURRENT, FUTURE, SEARCH\n\n\nCongredi uses three classes of operations, unprivledged local,\nprivledged global, and privledged recursion.\n\n\nOperations like \nDEPLOY\n and \nMONITOR\n need no permissions but\nonly ask about that local node, and don't have a guarentee of\npersisting on it. If more important things need to be stored,\nthese ones will be removed first.\n\n\nOperations like \nPUBLISH\n and \nSUBSCRIBE\n, however, use the\nnode's time and resources to ask around for things, and deploy\ntheir results to multiple servers to get the word around.\n\n\nFinally, operations like \nPAST\n \nCURRENT\n \nFUTURE\n and \nSEARCH\n\nare dependant on having the full list of objects, and operate\nby trying to split the work among other nodes.\n\n\nBlobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.\n\n\nExample Operations:\n\n\nMONITOR CACHE foobar HAS : \n\n\nDEPLOY CACHE foobar HAS", 
            "title": "Design"
        }, 
        {
            "location": "/commands/design/#design-problems", 
            "text": "PUBLISH, DEPLOY, SUBSCRIBE, MONITOR, PAST, CURRENT, FUTURE, SEARCH  Congredi uses three classes of operations, unprivledged local,\nprivledged global, and privledged recursion.  Operations like  DEPLOY  and  MONITOR  need no permissions but\nonly ask about that local node, and don't have a guarentee of\npersisting on it. If more important things need to be stored,\nthese ones will be removed first.  Operations like  PUBLISH  and  SUBSCRIBE , however, use the\nnode's time and resources to ask around for things, and deploy\ntheir results to multiple servers to get the word around.  Finally, operations like  PAST   CURRENT   FUTURE  and  SEARCH \nare dependant on having the full list of objects, and operate\nby trying to split the work among other nodes.  Blobs will probably be zlib compressed ndiffs, even if I want them to be\nunified diffs.  Example Operations:  MONITOR CACHE foobar HAS :   DEPLOY CACHE foobar HAS", 
            "title": "Design Problems"
        }, 
        {
            "location": "/commands/current/", 
            "text": "CURRENT\n\n\n\n\nCheck the info we have\n\n\nCheck where we got it from\n\n\nCheck our peers\n\n\nReturn our results", 
            "title": "current"
        }, 
        {
            "location": "/commands/current/#current", 
            "text": "Check the info we have  Check where we got it from  Check our peers  Return our results", 
            "title": "CURRENT"
        }, 
        {
            "location": "/commands/future/", 
            "text": "FUTURE\n\n\nSame as above", 
            "title": "future"
        }, 
        {
            "location": "/commands/future/#future", 
            "text": "Same as above", 
            "title": "FUTURE"
        }, 
        {
            "location": "/commands/past/", 
            "text": "PAST\n\n\n\n\nCheck the user permissions\n\n\nCheck all the info we have, send this to peers to help them\n\n\nTry to get to a null-beginning hash of the tree\n\n\nProve that the content lines up end to end\n\n\nReturn the content", 
            "title": "past"
        }, 
        {
            "location": "/commands/past/#past", 
            "text": "Check the user permissions  Check all the info we have, send this to peers to help them  Try to get to a null-beginning hash of the tree  Prove that the content lines up end to end  Return the content", 
            "title": "PAST"
        }, 
        {
            "location": "/commands/search/", 
            "text": "SEARCH\n\n\nSEARCH \n ORDER \n OFFSET \n COUNT \n TERM \n\n1. if we have the full diff, search it\n2. if we don't, request PAST/FUTURE queries\n3. return ranked results", 
            "title": "search"
        }, 
        {
            "location": "/commands/search/#search", 
            "text": "SEARCH   ORDER   OFFSET   COUNT   TERM  \n1. if we have the full diff, search it\n2. if we don't, request PAST/FUTURE queries\n3. return ranked results", 
            "title": "SEARCH"
        }, 
        {
            "location": "/commands/publish/", 
            "text": "PUBLISH - privledged set\n\n\nPUBLISH IDENTITY USER \nkey\npreviousfingerprint\nsigbyprevious\n\nDifferences:\n2. Fail if we don't have the key, publish operations are privledged,\n    Ask for permission before using them!\n2.5. Check if a trust-path exists from this node's users to that key. ErrBack.", 
            "title": "publish"
        }, 
        {
            "location": "/commands/publish/#publish-privledged-set", 
            "text": "PUBLISH IDENTITY USER  key previousfingerprint sigbyprevious \nDifferences:\n2. Fail if we don't have the key, publish operations are privledged,\n    Ask for permission before using them!\n2.5. Check if a trust-path exists from this node's users to that key. ErrBack.", 
            "title": "PUBLISH - privledged set"
        }, 
        {
            "location": "/commands/deploy/", 
            "text": "DEPLOY - unprivledged set\n\n\nDEPLOY IDENTITY USER \nkey\npreviousfingerprint\nsigbyprevious\n\n1. Check validity of sig against given key.\n2. Request previous key if we don't have it.\n3. Add previous key, new key, and query proof to DB, expire (lim)\n4. Return certification that it'll be in there, barring space considerations.", 
            "title": "deploy"
        }, 
        {
            "location": "/commands/deploy/#deploy-unprivledged-set", 
            "text": "DEPLOY IDENTITY USER  key previousfingerprint sigbyprevious \n1. Check validity of sig against given key.\n2. Request previous key if we don't have it.\n3. Add previous key, new key, and query proof to DB, expire (lim)\n4. Return certification that it'll be in there, barring space considerations.", 
            "title": "DEPLOY - unprivledged set"
        }, 
        {
            "location": "/commands/subscribe/", 
            "text": "SUBSCRIBE - privledged get\n\n\n\n\nCheck what we know about it\n\n\nCheck what peers know about it\n\n\nReturn results, and where we got it from\n\n\nUpdate their rendesvous peers if they want to know more", 
            "title": "subscribe"
        }, 
        {
            "location": "/commands/subscribe/#subscribe-privledged-get", 
            "text": "Check what we know about it  Check what peers know about it  Return results, and where we got it from  Update their rendesvous peers if they want to know more", 
            "title": "SUBSCRIBE - privledged get"
        }, 
        {
            "location": "/commands/monitor/", 
            "text": "MONITOR - unprivledged get\n\n\nMONITOR CACHE \nhash\n WANTS\n\n\n\n\nCheck that we know about the hash\n\n\nReturn results\n\n\ninclude where we got it from so they can do their research", 
            "title": "monitor"
        }, 
        {
            "location": "/commands/monitor/#monitor-unprivledged-get", 
            "text": "MONITOR CACHE  hash  WANTS   Check that we know about the hash  Return results  include where we got it from so they can do their research", 
            "title": "MONITOR - unprivledged get"
        }
    ]
}